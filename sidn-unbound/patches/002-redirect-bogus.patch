diff --git a/daemon/worker.c b/daemon/worker.c
index 76c4bb5b..ad2b6239 100644
--- a/daemon/worker.c
+++ b/daemon/worker.c
@@ -684,11 +684,25 @@ answer_from_cache(struct worker* worker, struct query_info* qinfo,
 		edns->ext_rcode = 0;
 		edns->bits &= EDNS_DO;
 		if(!inplace_cb_reply_servfail_call(&worker->env, qinfo, NULL, rep,
-			LDNS_RCODE_SERVFAIL, edns, repinfo, worker->scratchpad))
+			LDNS_RCODE_SERVFAIL, edns, repinfo, worker->scratchpad)) {
 			goto bail_out;
-		error_encode(repinfo->c->buffer, LDNS_RCODE_SERVFAIL,
-			qinfo, id, flags, edns);
-		rrset_array_unlock_touch(worker->env.rrset_cache,
+		}
+		if (qinfo->qtype == LDNS_RR_TYPE_A &&
+		    worker->env.cfg->redirect_bogus_ipv4) {
+			/* BAD cached */
+			fixed_address_encode(repinfo->c->buffer, LDNS_RCODE_NOERROR,
+				qinfo, id, flags, edns,
+				worker->env.cfg->redirect_bogus_ipv4);
+		} else if (qinfo->qtype == LDNS_RR_TYPE_AAAA &&
+		           worker->env.cfg->redirect_bogus_ipv6) {
+			fixed_address_encode(repinfo->c->buffer, LDNS_RCODE_NOERROR,
+				qinfo, id, flags, edns,
+				worker->env.cfg->redirect_bogus_ipv6);
+		} else {
+			error_encode(repinfo->c->buffer, LDNS_RCODE_SERVFAIL,
+				qinfo, id, flags, edns);
+		}
+		rrset_array_unlock_touch(worker->env.rrset_cache, 
 			worker->scratchpad, rep->ref, rep->rrset_count);
 		if(worker->stats.extended) {
 			worker->stats.ans_bogus ++;
diff --git a/doc/unbound.conf.5.in b/doc/unbound.conf.5.in
index 38bbc44d..82cc189a 100644
--- a/doc/unbound.conf.5.in
+++ b/doc/unbound.conf.5.in
@@ -1559,6 +1559,15 @@ option can be used multiple times. The most specific match will be used.
 EDNS0 option code for the \fIedns\-client\-string\fR option, from 0 to 65535.
 A value from the `Reserved for Local/Experimental` range (65001-65534) should
 be used.  Default is 65001.
+.B redirect-bogus-ipv4: \fI<IPv4 address>
+Set a fixed address for DNSSEC failures that are cached Instead of
+responding to A queries with SERVFAIL, respond with NOERROR and the address
+specified here. The TTL of the response will be 5 seconds.
+.TP 5
+.B redirect-bogus-ipv6: \fI<IPv4 address>
+Set a fixed address for DNSSEC failures that are cached Instead of
+responding to AAAA queries with SERVFAIL, respond with NOERROR and the
+address specified here. The TTL of the response will be 5 seconds.
 .SS "Remote Control Options"
 In the
 .B remote\-control:
diff --git a/services/mesh.c b/services/mesh.c
index cd905093..e3b7c5b9 100644
--- a/services/mesh.c
+++ b/services/mesh.c
@@ -1193,6 +1193,7 @@ mesh_send_reply(struct mesh_state* m, int rcode, struct reply_info* rep,
 	struct timeval end_time;
 	struct timeval duration;
 	int secure;
+	int bogus_override = 0;
 	/* Copy the client's EDNS for later restore, to make sure the edns
 	 * compare is with the correct edns options. */
 	struct edns_data edns_bak = r->edns;
@@ -1210,6 +1211,7 @@ mesh_send_reply(struct mesh_state* m, int rcode, struct reply_info* rep,
 		rcode = LDNS_RCODE_SERVFAIL;
 		if(m->s.env->cfg->stat_extended) 
 			m->s.env->mesh->ans_bogus++;
+		bogus_override = 1;
 	}
 	if(rep && rep->security == sec_status_secure)
 		secure = 1;
@@ -1254,18 +1256,33 @@ mesh_send_reply(struct mesh_state* m, int rcode, struct reply_info* rep,
 	} else if(rcode) {
 		m->s.qinfo.qname = r->qname;
 		m->s.qinfo.local_alias = r->local_alias;
-		if(rcode == LDNS_RCODE_SERVFAIL) {
-			if(!inplace_cb_reply_servfail_call(m->s.env, &m->s.qinfo, &m->s,
-				rep, rcode, &r->edns, &r->query_reply, m->s.region))
-					r->edns.opt_list = NULL;
-		} else { 
-			if(!inplace_cb_reply_call(m->s.env, &m->s.qinfo, &m->s, rep, rcode,
-				&r->edns, &r->query_reply, m->s.region))
-					r->edns.opt_list = NULL;
+		if(bogus_override && m->s.qinfo.qtype == LDNS_RR_TYPE_A &&
+			m->s.env->cfg->redirect_bogus_ipv4) {
+			fixed_address_encode(r->query_reply.c->buffer,
+				LDNS_RCODE_NOERROR, &m->s.qinfo, r->qid,
+				r->qflags, &r->edns,
+				m->s.env->cfg->redirect_bogus_ipv4);
+		} else if(bogus_override &&
+			m->s.qinfo.qtype == LDNS_RR_TYPE_AAAA &&
+			m->s.env->cfg->redirect_bogus_ipv6) {
+			fixed_address_encode(r->query_reply.c->buffer,
+				LDNS_RCODE_NOERROR, &m->s.qinfo, r->qid,
+				r->qflags, &r->edns,
+				m->s.env->cfg->redirect_bogus_ipv6);
+		} else {
+			if(rcode == LDNS_RCODE_SERVFAIL) {
+				if(!inplace_cb_reply_servfail_call(m->s.env, &m->s.qinfo, &m->s,
+					rep, rcode, &r->edns, &r->query_reply, m->s.region))
+						r->edns.opt_list = NULL;
+			} else { 
+				if(!inplace_cb_reply_call(m->s.env, &m->s.qinfo, &m->s, rep, rcode,
+					&r->edns, &r->query_reply, m->s.region))
+						r->edns.opt_list = NULL;
+			}
+			error_encode(r_buffer, rcode, &m->s.qinfo, r->qid,
+				r->qflags, &r->edns);
+			m->reply_list = NULL;
 		}
-		error_encode(r_buffer, rcode, &m->s.qinfo, r->qid,
-			r->qflags, &r->edns);
-		m->reply_list = NULL;
 		comm_point_send_reply(&r->query_reply);
 		m->reply_list = rlist;
 	} else {
diff --git a/util/config_file.c b/util/config_file.c
index 4c827b74..0fbd154e 100644
--- a/util/config_file.c
+++ b/util/config_file.c
@@ -357,6 +357,8 @@ config_create(void)
 	cfg->ipset_name_v4 = NULL;
 	cfg->ipset_name_v6 = NULL;
 #endif
+	cfg->redirect_bogus_ipv4 = NULL;
+	cfg->redirect_bogus_ipv6 = NULL;
 	return cfg;
 error_exit:
 	config_delete(cfg);
@@ -745,6 +747,10 @@ int config_set_option(struct config_file* cfg, const char* opt,
 		}
 		oi[cfg->num_out_ifs++] = d;
 		cfg->out_ifs = oi;
+	} else if (strcmp(opt, "redirect-bogus-ipv4:") == 0) {
+		cfg->redirect_bogus_ipv4 = strdup(val);
+	} else if (strcmp(opt, "redirect-bogus-ipv6:") == 0) {
+		cfg->redirect_bogus_ipv6 = strdup(val);
 	} else {
 		/* unknown or unsupported (from the set_option interface):
 		 * interface, outgoing-interface, access-control,
@@ -1543,6 +1549,12 @@ config_delete(struct config_file* cfg)
 	free(cfg->ipset_name_v4);
 	free(cfg->ipset_name_v6);
 #endif
+	if (cfg->redirect_bogus_ipv4) {
+		free(cfg->redirect_bogus_ipv4);
+	}
+	if (cfg->redirect_bogus_ipv6) {
+		free(cfg->redirect_bogus_ipv6);
+	}
 	free(cfg);
 }
 
diff --git a/util/config_file.h b/util/config_file.h
index 55654402..615379bb 100644
--- a/util/config_file.h
+++ b/util/config_file.h
@@ -635,6 +635,10 @@ struct config_file {
 	char* ipset_name_v4;
 	char* ipset_name_v6;
 #endif
+
+	/** construct fake responses for DNSSEC failures */
+	char *redirect_bogus_ipv4;
+	char *redirect_bogus_ipv6;
 };
 
 /** from cfg username, after daemonize setup performed */
diff --git a/util/configlexer.lex b/util/configlexer.lex
index 55c584a7..60f73fc9 100644
--- a/util/configlexer.lex
+++ b/util/configlexer.lex
@@ -531,6 +531,8 @@ udp-upstream-without-downstream{COLON} { YDVAR(1, VAR_UDP_UPSTREAM_WITHOUT_DOWNS
 tcp-connection-limit{COLON}	{ YDVAR(2, VAR_TCP_CONNECTION_LIMIT) }
 edns-client-string{COLON}	{ YDVAR(2, VAR_EDNS_CLIENT_STRING) }
 edns-client-string-opcode{COLON} { YDVAR(1, VAR_EDNS_CLIENT_STRING_OPCODE) }
+redirect-bogus-ipv4{COLON}	{ YDVAR(1, VAR_REDIRECT_BOGUS_IPV4) }
+redirect-bogus-ipv6{COLON}	{ YDVAR(1, VAR_REDIRECT_BOGUS_IPV6) }
 <INITIAL,val>{NEWLINE}		{ LEXOUT(("NL\n")); cfg_parser->line++; }
 
 	/* Quoted strings. Strip leading and ending quotes */
diff --git a/util/configparser.y b/util/configparser.y
index 4d6b5e3f..6a4a2a77 100644
--- a/util/configparser.y
+++ b/util/configparser.y
@@ -44,6 +44,7 @@
 #include <stdlib.h>
 #include <assert.h>
 
+#include "sldns/str2wire.h"
 #include "util/configyyrename.h"
 #include "util/config_file.h"
 #include "util/net_help.h"
@@ -180,6 +181,7 @@ extern struct config_parser_state* cfg_parser;
 %token VAR_RPZ_CNAME_OVERRIDE VAR_RPZ_LOG VAR_RPZ_LOG_NAME
 %token VAR_DYNLIB VAR_DYNLIB_FILE VAR_EDNS_CLIENT_STRING
 %token VAR_EDNS_CLIENT_STRING_OPCODE
+%token VAR_REDIRECT_BOGUS_IPV4 VAR_REDIRECT_BOGUS_IPV6
 
 %%
 toplevelvars: /* empty */ | toplevelvars toplevelvar ;
@@ -293,7 +295,8 @@ content_server: server_num_threads | server_verbosity | server_port |
 	server_stream_wait_size | server_tls_ciphers |
 	server_tls_ciphersuites | server_tls_session_ticket_keys |
 	server_tls_use_sni | server_edns_client_string |
-	server_edns_client_string_opcode
+	server_edns_client_string_opcode |
+	server_redirect_bogus_ipv4 | server_redirect_bogus_ipv6
 	;
 stubstart: VAR_STUB_ZONE
 	{
@@ -2515,6 +2518,34 @@ server_edns_client_string_opcode: VAR_EDNS_CLIENT_STRING_OPCODE STRING_ARG
 
 	}
 	;
+server_redirect_bogus_ipv4: VAR_REDIRECT_BOGUS_IPV4 STRING_ARG
+	{
+		uint8_t data[4];
+		size_t data_len = 4;
+		OUTYY(("P(name:%s)\n", $2));
+		if(cfg_parser->cfg->redirect_bogus_ipv4) {
+			yyerror("redirect-bogus-ipv4, can only use one address");
+		}
+		if(sldns_str2wire_a_buf($2, data, &data_len) != LDNS_WIREPARSE_ERR_OK) {
+			yyerror("redirect-bogus-ipv4, not a valid IPv4 address");
+		}
+		free(cfg_parser->cfg->redirect_bogus_ipv4);
+		cfg_parser->cfg->redirect_bogus_ipv4 = $2;
+	}
+server_redirect_bogus_ipv6: VAR_REDIRECT_BOGUS_IPV6 STRING_ARG
+	{
+		uint8_t data[16];
+		size_t data_len = 16;
+		OUTYY(("P(name:%s)\n", $2));
+		if(cfg_parser->cfg->redirect_bogus_ipv6) {
+			yyerror("redirect-bogus-ipv6, can only use one address");
+		}
+		if(sldns_str2wire_aaaa_buf($2, data, &data_len) != LDNS_WIREPARSE_ERR_OK) {
+			yyerror("redirect-bogus-ipv6, not a valid IPv6 address");
+		}
+		free(cfg_parser->cfg->redirect_bogus_ipv6);
+		cfg_parser->cfg->redirect_bogus_ipv6 = $2;
+	}
 stub_name: VAR_NAME STRING_ARG
 	{
 		OUTYY(("P(name:%s)\n", $2));
diff --git a/util/data/msgencode.c b/util/data/msgencode.c
index 1746cfbb..12b0ad2f 100644
--- a/util/data/msgencode.c
+++ b/util/data/msgencode.c
@@ -48,6 +48,7 @@
 #include "util/regional.h"
 #include "util/net_help.h"
 #include "sldns/sbuffer.h"
+#include "sldns/str2wire.h"
 #include "services/localzone.h"
 
 #ifdef HAVE_TIME_H
@@ -952,3 +953,63 @@ error_encode(sldns_buffer* buf, int r, struct query_info* qinfo,
 		attach_edns_record(buf, &es);
 	}
 }
+
+void
+fixed_address_encode(sldns_buffer* buf, int r, struct query_info* qinfo,
+	uint16_t qid, uint16_t qflags, struct edns_data* edns, char* data)
+{
+	uint16_t flags;
+	uint8_t addr_data[16];
+	size_t addr_len = 16;
+	if (qinfo->qtype == LDNS_RR_TYPE_A) {
+		sldns_str2wire_a_buf(data, addr_data, &addr_len);
+	} else if (qinfo->qtype == LDNS_RR_TYPE_AAAA) {
+		sldns_str2wire_aaaa_buf(data, addr_data, &addr_len);
+	} else {
+		return error_encode(buf, LDNS_RCODE_NOERROR, qinfo, qid, qflags, edns);
+	}
+	sldns_buffer_clear(buf);
+	sldns_buffer_write(buf, &qid, sizeof(uint16_t));
+	flags = (uint16_t)(BIT_QR | BIT_RA | r); /* QR and retcode*/
+	flags |= (qflags & (BIT_RD|BIT_CD)); /* copy RD and CD bit */
+	sldns_buffer_write_u16(buf, flags);
+	if(qinfo) flags = 1;
+	else	flags = 0;
+	sldns_buffer_write_u16(buf, flags);
+	sldns_buffer_write_u16(buf, 1);
+	flags = 0;
+	sldns_buffer_write(buf, &flags, sizeof(uint16_t));
+	sldns_buffer_write(buf, &flags, sizeof(uint16_t));
+	if(qinfo) {
+		// query
+		if(sldns_buffer_current(buf) == qinfo->qname)
+			sldns_buffer_skip(buf, (ssize_t)qinfo->qname_len);
+		else	sldns_buffer_write(buf, qinfo->qname, qinfo->qname_len);
+		sldns_buffer_write_u16(buf, qinfo->qtype);
+		sldns_buffer_write_u16(buf, qinfo->qclass);
+		// faked answer
+		if(sldns_buffer_current(buf) == qinfo->qname)
+			sldns_buffer_skip(buf, (ssize_t)qinfo->qname_len);
+		else	sldns_buffer_write(buf, qinfo->qname, qinfo->qname_len);
+		sldns_buffer_write_u16(buf, qinfo->qtype);
+		sldns_buffer_write_u16(buf, qinfo->qclass);
+		sldns_buffer_write_u16(buf, 0);
+		// TTL. Should we make this configurable too?
+		sldns_buffer_write_u16(buf, 5);
+		sldns_buffer_write_u16(buf, addr_len);
+		sldns_buffer_write(buf, addr_data, addr_len);
+		fflush(stderr);
+	}
+	sldns_buffer_flip(buf);
+	if(edns) {
+		struct edns_data es = *edns;
+		es.edns_version = EDNS_ADVERTISED_VERSION;
+		es.udp_size = EDNS_ADVERTISED_SIZE;
+		es.ext_rcode = 0;
+		es.bits &= EDNS_DO;
+		if(sldns_buffer_limit(buf) + calc_edns_field_size(&es) >
+			edns->udp_size)
+			return;
+		attach_edns_record(buf, &es);
+	}
+}
diff --git a/util/data/msgencode.h b/util/data/msgencode.h
index 30dc515c..d1a44a87 100644
--- a/util/data/msgencode.h
+++ b/util/data/msgencode.h
@@ -130,4 +130,20 @@ void attach_edns_record(struct sldns_buffer* pkt, struct edns_data* edns);
 void error_encode(struct sldns_buffer* pkt, int r, struct query_info* qinfo,
 	uint16_t qid, uint16_t qflags, struct edns_data* edns);
 
+/**
+ * Encode a fixed address response.
+ * This is a fake answer to either an A or AAA query
+ *
+ * It will answer with that address
+ *
+ * @param pkt: where to store the packet.
+ * @param r: RCODE value to encode.
+ * @param qinfo: if not NULL, the query is included.
+ * @param qid: query ID to set in packet. network order.
+ * @param qflags: original query flags (to copy RD and CD bits). host order.
+ * @param edns: if not NULL, this is the query edns info,
+ * 	and an edns reply is attached. Only attached if EDNS record fits reply.
+ */
+void fixed_address_encode(struct sldns_buffer* pkt, int r, struct query_info* qinfo,
+	uint16_t qid, uint16_t qflags, struct edns_data* edns, char* address);
 #endif /* UTIL_DATA_MSGENCODE_H */
